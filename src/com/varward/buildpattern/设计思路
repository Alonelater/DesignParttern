1.介绍
1.1什么是构建者模式
创建者模式又叫建造者模式，是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
创建者模式隐藏了复杂对象的创建过程，它把复杂对象的创建过程加以抽象，通过子类继承或者重载的方式，动态的创建具有复合属性的对象。

1.2适用场景：
隔离复杂对象的创建和使用，相同的方法，不同执行顺序，产生不同事件结果
多个部件都可以装配到一个对象中，但产生的运行结果不相同
产品类非常复杂或者产品类因为调用顺序不同而产生不同作用
初始化一个对象时，参数过多，或者很多参数具有默认值
Builder模式不适合创建差异性很大的产品类
产品内部变化复杂，会导致需要定义很多具体建造者类实现变化，增加项目中类的数量，增加系统的理解难度和运行成本
需要生成的产品对象有复杂的内部结构，这些产品对象具备共性；
1.3 主要作用
在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。

用户只需要给出指定复杂对象的类型和内容；
建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来)
1.4 解决的问题
方便用户创建复杂的对象（不需要知道实现过程）
代码复用性 & 封装性（将对象构建过程和细节进行封装 & 复用）
例子：造汽车 & 买汽车。

工厂（建造者模式）：负责制造汽车（组装过>程和细节在工厂内）
汽车购买者（用户）：你只需要说出你需要的>型号（对象的类型和内容），然后直接购买就可>>以使用了
（不需要知道汽车是怎么组装的（车轮、车门、>发动机、方向盘等等））



建造者模式中，有如下4个角色：

1. Product 产品类，通常是实现了模板方法模式，也就是有模板方法和基本方法。就像上面例子中的汽车类。关于模板方法模式可以阅读我的上篇文章“设计模式篇——模板方法模式详解”。

2. Builder 抽象建造者，它是规范产品的组件，一般是由子类实现。

3. ConcreteBuilder 具体建造者，实现抽象 Builder 定义的所有方法，并且返回一个组件好的对象。

4. Director 导演类，负责安排已有模块的顺序，然后告诉 Builder 开始建造。

建造者模式的通用代码也很简单，先看 Product 产品类，通常它是一个组合或继承产生的类：

2.2模式讲解：
指挥者（Director）直接和客户（Client）进行需求沟通；
沟通后指挥者将客户创建产品的需求划分为各个部件的建造请求（Builder）；
将各个部件的建造请求委派到具体的建造者（ConcreteBuilder）；
各个具体建造者负责进行产品部件的构建；
最终构建成具体产品（Product）。




作者：大前端圈
链接：https://www.jianshu.com/p/3d1c9ffb0a28
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。